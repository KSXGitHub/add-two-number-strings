// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot: components/RandomNumberForm.jsx with default display function 1`] = `
<mocked-component
  _reactInternalInstance={
    ReactCompositeComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <MockedComponent
        zDepth={1}
    >
        <MockedComponent>
            <MockedComponent
                actAsExpander={true}
                showExpandableButton={true}
                subtitle="Click to expand tweak tools"
                title="Random Number"
            />
            <MockedComponent
                expandable={true}
            >
                <MockedComponent
                    expandable={true}
                >
                    <p>
                        <label
                            htmlFor="begin-slider"
                        >
                            Begin
                        </label>
                    </p>
                    <MockedComponent
                        id="begin-slider"
                        max={13}
                        min={0}
                        onChange={[Function]}
                        step={1}
                        value={0}
                    />
                    <p>
                        <label
                            htmlFor="end-slider"
                        >
                            End
                        </label>
                    </p>
                    <MockedComponent
                        id="end-slider"
                        max={13}
                        min={0}
                        onChange={[Function]}
                        step={1}
                        value={13}
                    />
                    <MockedComponent
                        checked={true}
                        label="Upper Case"
                        labelPosition="right"
                        onCheck={[Function]}
                        style={
                            Object {
                                "marginBottom": 16,
                              }
                        }
                    />
                </MockedComponent>
            </MockedComponent>
            <MockedComponent>
                <RandomNumber
                    display={[Function]}
                    init={[Function]}
                    label={null}
                    style={
                        Object {
                            "label": Object {
                              "color": "gray",
                            },
                            "value": Object {
                              "color": "brown",
                              "fontFamily": "monospace",
                              "fontSize": "1.75em",
                            },
                          }
                    }
                />
            </MockedComponent>
        </MockedComponent>
    </MockedComponent>,
      "_hostContainerInfo": Object {
        "createNodeMock": [Function],
      },
      "_hostParent": null,
      "_instance": MockedComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": <MockedComponent>
            <MockedComponent
                    actAsExpander={true}
                    showExpandableButton={true}
                    subtitle="Click to expand tweak tools"
                    title="Random Number"
            />
            <MockedComponent
                    expandable={true}
            >
                    <MockedComponent
                            expandable={true}
                    >
                            <p>
                                    <label
                                            htmlFor="begin-slider"
                                    >
                                            Begin
                                    </label>
                            </p>
                            <MockedComponent
                                    id="begin-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={0}
                            />
                            <p>
                                    <label
                                            htmlFor="end-slider"
                                    >
                                            End
                                    </label>
                            </p>
                            <MockedComponent
                                    id="end-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={13}
                            />
                            <MockedComponent
                                    checked={true}
                                    label="Upper Case"
                                    labelPosition="right"
                                    onCheck={[Function]}
                                    style={
                                            Object {
                                                    "marginBottom": 16,
                                                  }
                                    }
                            />
                    </MockedComponent>
            </MockedComponent>
            <MockedComponent>
                    <RandomNumber
                            display={[Function]}
                            init={[Function]}
                            label={null}
                            style={
                                    Object {
                                            "label": Object {
                                              "color": "gray",
                                            },
                                            "value": Object {
                                              "color": "brown",
                                              "fontFamily": "monospace",
                                              "fontSize": "1.75em",
                                            },
                                          }
                            }
                    />
            </MockedComponent>
    </MockedComponent>,
          "zDepth": 1,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountImage": null,
      "_mountIndex": 0,
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": <mocked-component
        _reactInternalInstance={[Circular]}
        context={Object {}}
        props={
            Object {
                "children": <MockedComponent>
                  <MockedComponent
                        actAsExpander={true}
                        showExpandableButton={true}
                        subtitle="Click to expand tweak tools"
                        title="Random Number"
                  />
                  <MockedComponent
                        expandable={true}
                  >
                        <MockedComponent
                              expandable={true}
                        >
                              <p>
                                    <label
                                          htmlFor="begin-slider"
                                    >
                                          Begin
                                    </label>
                              </p>
                              <MockedComponent
                                    id="begin-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={0}
                              />
                              <p>
                                    <label
                                          htmlFor="end-slider"
                                    >
                                          End
                                    </label>
                              </p>
                              <MockedComponent
                                    id="end-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={13}
                              />
                              <MockedComponent
                                    checked={true}
                                    label="Upper Case"
                                    labelPosition="right"
                                    onCheck={[Function]}
                                    style={
                                          Object {
                                                "marginBottom": 16,
                                              }
                                    }
                              />
                        </MockedComponent>
                  </MockedComponent>
                  <MockedComponent>
                        <RandomNumber
                              display={[Function]}
                              init={[Function]}
                              label={null}
                              style={
                                    Object {
                                          "label": Object {
                                            "color": "gray",
                                          },
                                          "value": Object {
                                            "color": "brown",
                                            "fontFamily": "monospace",
                                            "fontSize": "1.75em",
                                          },
                                        }
                              }
                        />
                  </MockedComponent>
            </MockedComponent>,
                "zDepth": 1,
              }
        }
        refs={Object {}}
        state={null}
        updater={
            Object {
                "enqueueCallback": [Function],
                "enqueueCallbackInternal": [Function],
                "enqueueElementInternal": [Function],
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
                "validateCallback": [Function],
              }
        }
    />,
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
    }
  }
  context={Object {}}
  props={
    Object {
      "children": <MockedComponent>
        <MockedComponent
            actAsExpander={true}
            showExpandableButton={true}
            subtitle="Click to expand tweak tools"
            title="Random Number"
        />
        <MockedComponent
            expandable={true}
        >
            <MockedComponent
                expandable={true}
            >
                <p>
                    <label
                        htmlFor="begin-slider"
                    >
                        Begin
                    </label>
                </p>
                <MockedComponent
                    id="begin-slider"
                    max={13}
                    min={0}
                    onChange={[Function]}
                    step={1}
                    value={0}
                />
                <p>
                    <label
                        htmlFor="end-slider"
                    >
                        End
                    </label>
                </p>
                <MockedComponent
                    id="end-slider"
                    max={13}
                    min={0}
                    onChange={[Function]}
                    step={1}
                    value={13}
                />
                <MockedComponent
                    checked={true}
                    label="Upper Case"
                    labelPosition="right"
                    onCheck={[Function]}
                    style={
                        Object {
                            "marginBottom": 16,
                          }
                    }
                />
            </MockedComponent>
        </MockedComponent>
        <MockedComponent>
            <RandomNumber
                display={[Function]}
                init={[Function]}
                label={null}
                style={
                    Object {
                        "label": Object {
                          "color": "gray",
                        },
                        "value": Object {
                          "color": "brown",
                          "fontFamily": "monospace",
                          "fontSize": "1.75em",
                        },
                      }
                }
            />
        </MockedComponent>
    </MockedComponent>,
      "zDepth": 1,
    }
  }
  refs={Object {}}
  state={null}
  updater={
    Object {
      "enqueueCallback": [Function],
      "enqueueCallbackInternal": [Function],
      "enqueueElementInternal": [Function],
      "enqueueForceUpdate": [Function],
      "enqueueReplaceState": [Function],
      "enqueueSetState": [Function],
      "isMounted": [Function],
      "validateCallback": [Function],
    }
  }
/>
`;

exports[`Snapshot: components/RandomNumberForm.jsx with specified display function 1`] = `
<mocked-component
  _reactInternalInstance={
    ReactCompositeComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <MockedComponent
        zDepth={1}
    >
        <MockedComponent>
            <MockedComponent
                actAsExpander={true}
                showExpandableButton={true}
                subtitle="Click to expand tweak tools"
                title="Random Number"
            />
            <MockedComponent
                expandable={true}
            >
                <MockedComponent
                    expandable={true}
                >
                    <p>
                        <label
                            htmlFor="begin-slider"
                        >
                            Begin
                        </label>
                    </p>
                    <MockedComponent
                        id="begin-slider"
                        max={13}
                        min={0}
                        onChange={[Function]}
                        step={1}
                        value={0}
                    />
                    <p>
                        <label
                            htmlFor="end-slider"
                        >
                            End
                        </label>
                    </p>
                    <MockedComponent
                        id="end-slider"
                        max={13}
                        min={0}
                        onChange={[Function]}
                        step={1}
                        value={13}
                    />
                    <MockedComponent
                        checked={true}
                        label="Upper Case"
                        labelPosition="right"
                        onCheck={[Function]}
                        style={
                            Object {
                                "marginBottom": 16,
                              }
                        }
                    />
                </MockedComponent>
            </MockedComponent>
            <MockedComponent>
                <RandomNumber
                    display={[Function]}
                    init={[Function]}
                    label={null}
                    style={
                        Object {
                            "label": Object {
                              "color": "gray",
                            },
                            "value": Object {
                              "color": "brown",
                              "fontFamily": "monospace",
                              "fontSize": "1.75em",
                            },
                          }
                    }
                />
            </MockedComponent>
        </MockedComponent>
    </MockedComponent>,
      "_hostContainerInfo": Object {
        "createNodeMock": [Function],
      },
      "_hostParent": null,
      "_instance": MockedComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": <MockedComponent>
            <MockedComponent
                    actAsExpander={true}
                    showExpandableButton={true}
                    subtitle="Click to expand tweak tools"
                    title="Random Number"
            />
            <MockedComponent
                    expandable={true}
            >
                    <MockedComponent
                            expandable={true}
                    >
                            <p>
                                    <label
                                            htmlFor="begin-slider"
                                    >
                                            Begin
                                    </label>
                            </p>
                            <MockedComponent
                                    id="begin-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={0}
                            />
                            <p>
                                    <label
                                            htmlFor="end-slider"
                                    >
                                            End
                                    </label>
                            </p>
                            <MockedComponent
                                    id="end-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={13}
                            />
                            <MockedComponent
                                    checked={true}
                                    label="Upper Case"
                                    labelPosition="right"
                                    onCheck={[Function]}
                                    style={
                                            Object {
                                                    "marginBottom": 16,
                                                  }
                                    }
                            />
                    </MockedComponent>
            </MockedComponent>
            <MockedComponent>
                    <RandomNumber
                            display={[Function]}
                            init={[Function]}
                            label={null}
                            style={
                                    Object {
                                            "label": Object {
                                              "color": "gray",
                                            },
                                            "value": Object {
                                              "color": "brown",
                                              "fontFamily": "monospace",
                                              "fontSize": "1.75em",
                                            },
                                          }
                            }
                    />
            </MockedComponent>
    </MockedComponent>,
          "zDepth": 1,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountImage": null,
      "_mountIndex": 0,
      "_mountOrder": 6,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": <mocked-component
        _reactInternalInstance={[Circular]}
        context={Object {}}
        props={
            Object {
                "children": <MockedComponent>
                  <MockedComponent
                        actAsExpander={true}
                        showExpandableButton={true}
                        subtitle="Click to expand tweak tools"
                        title="Random Number"
                  />
                  <MockedComponent
                        expandable={true}
                  >
                        <MockedComponent
                              expandable={true}
                        >
                              <p>
                                    <label
                                          htmlFor="begin-slider"
                                    >
                                          Begin
                                    </label>
                              </p>
                              <MockedComponent
                                    id="begin-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={0}
                              />
                              <p>
                                    <label
                                          htmlFor="end-slider"
                                    >
                                          End
                                    </label>
                              </p>
                              <MockedComponent
                                    id="end-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={13}
                              />
                              <MockedComponent
                                    checked={true}
                                    label="Upper Case"
                                    labelPosition="right"
                                    onCheck={[Function]}
                                    style={
                                          Object {
                                                "marginBottom": 16,
                                              }
                                    }
                              />
                        </MockedComponent>
                  </MockedComponent>
                  <MockedComponent>
                        <RandomNumber
                              display={[Function]}
                              init={[Function]}
                              label={null}
                              style={
                                    Object {
                                          "label": Object {
                                            "color": "gray",
                                          },
                                          "value": Object {
                                            "color": "brown",
                                            "fontFamily": "monospace",
                                            "fontSize": "1.75em",
                                          },
                                        }
                              }
                        />
                  </MockedComponent>
            </MockedComponent>,
                "zDepth": 1,
              }
        }
        refs={Object {}}
        state={null}
        updater={
            Object {
                "enqueueCallback": [Function],
                "enqueueCallbackInternal": [Function],
                "enqueueElementInternal": [Function],
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
                "validateCallback": [Function],
              }
        }
    />,
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
    }
  }
  context={Object {}}
  props={
    Object {
      "children": <MockedComponent>
        <MockedComponent
            actAsExpander={true}
            showExpandableButton={true}
            subtitle="Click to expand tweak tools"
            title="Random Number"
        />
        <MockedComponent
            expandable={true}
        >
            <MockedComponent
                expandable={true}
            >
                <p>
                    <label
                        htmlFor="begin-slider"
                    >
                        Begin
                    </label>
                </p>
                <MockedComponent
                    id="begin-slider"
                    max={13}
                    min={0}
                    onChange={[Function]}
                    step={1}
                    value={0}
                />
                <p>
                    <label
                        htmlFor="end-slider"
                    >
                        End
                    </label>
                </p>
                <MockedComponent
                    id="end-slider"
                    max={13}
                    min={0}
                    onChange={[Function]}
                    step={1}
                    value={13}
                />
                <MockedComponent
                    checked={true}
                    label="Upper Case"
                    labelPosition="right"
                    onCheck={[Function]}
                    style={
                        Object {
                            "marginBottom": 16,
                          }
                    }
                />
            </MockedComponent>
        </MockedComponent>
        <MockedComponent>
            <RandomNumber
                display={[Function]}
                init={[Function]}
                label={null}
                style={
                    Object {
                        "label": Object {
                          "color": "gray",
                        },
                        "value": Object {
                          "color": "brown",
                          "fontFamily": "monospace",
                          "fontSize": "1.75em",
                        },
                      }
                }
            />
        </MockedComponent>
    </MockedComponent>,
      "zDepth": 1,
    }
  }
  refs={Object {}}
  state={null}
  updater={
    Object {
      "enqueueCallback": [Function],
      "enqueueCallbackInternal": [Function],
      "enqueueElementInternal": [Function],
      "enqueueForceUpdate": [Function],
      "enqueueReplaceState": [Function],
      "enqueueSetState": [Function],
      "isMounted": [Function],
      "validateCallback": [Function],
    }
  }
/>
`;

exports[`Snapshot: components/RandomNumberForm.jsx with specified display function 2`] = `
<mocked-component
  _reactInternalInstance={
    ReactCompositeComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <MockedComponent
        zDepth={1}
    >
        <MockedComponent>
            <MockedComponent
                actAsExpander={true}
                showExpandableButton={true}
                subtitle="Click to expand tweak tools"
                title="Random Number"
            />
            <MockedComponent
                expandable={true}
            >
                <MockedComponent
                    expandable={true}
                >
                    <p>
                        <label
                            htmlFor="begin-slider"
                        >
                            Begin
                        </label>
                    </p>
                    <MockedComponent
                        id="begin-slider"
                        max={13}
                        min={0}
                        onChange={[Function]}
                        step={1}
                        value={0}
                    />
                    <p>
                        <label
                            htmlFor="end-slider"
                        >
                            End
                        </label>
                    </p>
                    <MockedComponent
                        id="end-slider"
                        max={13}
                        min={0}
                        onChange={[Function]}
                        step={1}
                        value={13}
                    />
                    <MockedComponent
                        checked={true}
                        label="Upper Case"
                        labelPosition="right"
                        onCheck={[Function]}
                        style={
                            Object {
                                "marginBottom": 16,
                              }
                        }
                    />
                </MockedComponent>
            </MockedComponent>
            <MockedComponent>
                <RandomNumber
                    display={[Function]}
                    init={[Function]}
                    label={null}
                    style={
                        Object {
                            "label": Object {
                              "color": "gray",
                            },
                            "value": Object {
                              "color": "brown",
                              "fontFamily": "monospace",
                              "fontSize": "1.75em",
                            },
                          }
                    }
                />
            </MockedComponent>
        </MockedComponent>
    </MockedComponent>,
      "_hostContainerInfo": Object {
        "createNodeMock": [Function],
      },
      "_hostParent": null,
      "_instance": MockedComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": <MockedComponent>
            <MockedComponent
                    actAsExpander={true}
                    showExpandableButton={true}
                    subtitle="Click to expand tweak tools"
                    title="Random Number"
            />
            <MockedComponent
                    expandable={true}
            >
                    <MockedComponent
                            expandable={true}
                    >
                            <p>
                                    <label
                                            htmlFor="begin-slider"
                                    >
                                            Begin
                                    </label>
                            </p>
                            <MockedComponent
                                    id="begin-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={0}
                            />
                            <p>
                                    <label
                                            htmlFor="end-slider"
                                    >
                                            End
                                    </label>
                            </p>
                            <MockedComponent
                                    id="end-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={13}
                            />
                            <MockedComponent
                                    checked={true}
                                    label="Upper Case"
                                    labelPosition="right"
                                    onCheck={[Function]}
                                    style={
                                            Object {
                                                    "marginBottom": 16,
                                                  }
                                    }
                            />
                    </MockedComponent>
            </MockedComponent>
            <MockedComponent>
                    <RandomNumber
                            display={[Function]}
                            init={[Function]}
                            label={null}
                            style={
                                    Object {
                                            "label": Object {
                                              "color": "gray",
                                            },
                                            "value": Object {
                                              "color": "brown",
                                              "fontFamily": "monospace",
                                              "fontSize": "1.75em",
                                            },
                                          }
                            }
                    />
            </MockedComponent>
    </MockedComponent>,
          "zDepth": 1,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountImage": null,
      "_mountIndex": 0,
      "_mountOrder": 9,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": <mocked-component
        _reactInternalInstance={[Circular]}
        context={Object {}}
        props={
            Object {
                "children": <MockedComponent>
                  <MockedComponent
                        actAsExpander={true}
                        showExpandableButton={true}
                        subtitle="Click to expand tweak tools"
                        title="Random Number"
                  />
                  <MockedComponent
                        expandable={true}
                  >
                        <MockedComponent
                              expandable={true}
                        >
                              <p>
                                    <label
                                          htmlFor="begin-slider"
                                    >
                                          Begin
                                    </label>
                              </p>
                              <MockedComponent
                                    id="begin-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={0}
                              />
                              <p>
                                    <label
                                          htmlFor="end-slider"
                                    >
                                          End
                                    </label>
                              </p>
                              <MockedComponent
                                    id="end-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={13}
                              />
                              <MockedComponent
                                    checked={true}
                                    label="Upper Case"
                                    labelPosition="right"
                                    onCheck={[Function]}
                                    style={
                                          Object {
                                                "marginBottom": 16,
                                              }
                                    }
                              />
                        </MockedComponent>
                  </MockedComponent>
                  <MockedComponent>
                        <RandomNumber
                              display={[Function]}
                              init={[Function]}
                              label={null}
                              style={
                                    Object {
                                          "label": Object {
                                            "color": "gray",
                                          },
                                          "value": Object {
                                            "color": "brown",
                                            "fontFamily": "monospace",
                                            "fontSize": "1.75em",
                                          },
                                        }
                              }
                        />
                  </MockedComponent>
            </MockedComponent>,
                "zDepth": 1,
              }
        }
        refs={Object {}}
        state={null}
        updater={
            Object {
                "enqueueCallback": [Function],
                "enqueueCallbackInternal": [Function],
                "enqueueElementInternal": [Function],
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
                "validateCallback": [Function],
              }
        }
    />,
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
    }
  }
  context={Object {}}
  props={
    Object {
      "children": <MockedComponent>
        <MockedComponent
            actAsExpander={true}
            showExpandableButton={true}
            subtitle="Click to expand tweak tools"
            title="Random Number"
        />
        <MockedComponent
            expandable={true}
        >
            <MockedComponent
                expandable={true}
            >
                <p>
                    <label
                        htmlFor="begin-slider"
                    >
                        Begin
                    </label>
                </p>
                <MockedComponent
                    id="begin-slider"
                    max={13}
                    min={0}
                    onChange={[Function]}
                    step={1}
                    value={0}
                />
                <p>
                    <label
                        htmlFor="end-slider"
                    >
                        End
                    </label>
                </p>
                <MockedComponent
                    id="end-slider"
                    max={13}
                    min={0}
                    onChange={[Function]}
                    step={1}
                    value={13}
                />
                <MockedComponent
                    checked={true}
                    label="Upper Case"
                    labelPosition="right"
                    onCheck={[Function]}
                    style={
                        Object {
                            "marginBottom": 16,
                          }
                    }
                />
            </MockedComponent>
        </MockedComponent>
        <MockedComponent>
            <RandomNumber
                display={[Function]}
                init={[Function]}
                label={null}
                style={
                    Object {
                        "label": Object {
                          "color": "gray",
                        },
                        "value": Object {
                          "color": "brown",
                          "fontFamily": "monospace",
                          "fontSize": "1.75em",
                        },
                      }
                }
            />
        </MockedComponent>
    </MockedComponent>,
      "zDepth": 1,
    }
  }
  refs={Object {}}
  state={null}
  updater={
    Object {
      "enqueueCallback": [Function],
      "enqueueCallbackInternal": [Function],
      "enqueueElementInternal": [Function],
      "enqueueForceUpdate": [Function],
      "enqueueReplaceState": [Function],
      "enqueueSetState": [Function],
      "isMounted": [Function],
      "validateCallback": [Function],
    }
  }
/>
`;

exports[`Snapshot: components/RandomNumberForm.jsx with specified display function 3`] = `
<mocked-component
  _reactInternalInstance={
    ReactCompositeComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <MockedComponent
        zDepth={1}
    >
        <MockedComponent>
            <MockedComponent
                actAsExpander={true}
                showExpandableButton={true}
                subtitle="Click to expand tweak tools"
                title="Random Number"
            />
            <MockedComponent
                expandable={true}
            >
                <MockedComponent
                    expandable={true}
                >
                    <p>
                        <label
                            htmlFor="begin-slider"
                        >
                            Begin
                        </label>
                    </p>
                    <MockedComponent
                        id="begin-slider"
                        max={13}
                        min={0}
                        onChange={[Function]}
                        step={1}
                        value={0}
                    />
                    <p>
                        <label
                            htmlFor="end-slider"
                        >
                            End
                        </label>
                    </p>
                    <MockedComponent
                        id="end-slider"
                        max={13}
                        min={0}
                        onChange={[Function]}
                        step={1}
                        value={13}
                    />
                    <MockedComponent
                        checked={true}
                        label="Upper Case"
                        labelPosition="right"
                        onCheck={[Function]}
                        style={
                            Object {
                                "marginBottom": 16,
                              }
                        }
                    />
                </MockedComponent>
            </MockedComponent>
            <MockedComponent>
                <RandomNumber
                    display={[Function]}
                    init={[Function]}
                    label={null}
                    style={
                        Object {
                            "label": Object {
                              "color": "gray",
                            },
                            "value": Object {
                              "color": "brown",
                              "fontFamily": "monospace",
                              "fontSize": "1.75em",
                            },
                          }
                    }
                />
            </MockedComponent>
        </MockedComponent>
    </MockedComponent>,
      "_hostContainerInfo": Object {
        "createNodeMock": [Function],
      },
      "_hostParent": null,
      "_instance": MockedComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": <MockedComponent>
            <MockedComponent
                    actAsExpander={true}
                    showExpandableButton={true}
                    subtitle="Click to expand tweak tools"
                    title="Random Number"
            />
            <MockedComponent
                    expandable={true}
            >
                    <MockedComponent
                            expandable={true}
                    >
                            <p>
                                    <label
                                            htmlFor="begin-slider"
                                    >
                                            Begin
                                    </label>
                            </p>
                            <MockedComponent
                                    id="begin-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={0}
                            />
                            <p>
                                    <label
                                            htmlFor="end-slider"
                                    >
                                            End
                                    </label>
                            </p>
                            <MockedComponent
                                    id="end-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={13}
                            />
                            <MockedComponent
                                    checked={true}
                                    label="Upper Case"
                                    labelPosition="right"
                                    onCheck={[Function]}
                                    style={
                                            Object {
                                                    "marginBottom": 16,
                                                  }
                                    }
                            />
                    </MockedComponent>
            </MockedComponent>
            <MockedComponent>
                    <RandomNumber
                            display={[Function]}
                            init={[Function]}
                            label={null}
                            style={
                                    Object {
                                            "label": Object {
                                              "color": "gray",
                                            },
                                            "value": Object {
                                              "color": "brown",
                                              "fontFamily": "monospace",
                                              "fontSize": "1.75em",
                                            },
                                          }
                            }
                    />
            </MockedComponent>
    </MockedComponent>,
          "zDepth": 1,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountImage": null,
      "_mountIndex": 0,
      "_mountOrder": 12,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": <mocked-component
        _reactInternalInstance={[Circular]}
        context={Object {}}
        props={
            Object {
                "children": <MockedComponent>
                  <MockedComponent
                        actAsExpander={true}
                        showExpandableButton={true}
                        subtitle="Click to expand tweak tools"
                        title="Random Number"
                  />
                  <MockedComponent
                        expandable={true}
                  >
                        <MockedComponent
                              expandable={true}
                        >
                              <p>
                                    <label
                                          htmlFor="begin-slider"
                                    >
                                          Begin
                                    </label>
                              </p>
                              <MockedComponent
                                    id="begin-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={0}
                              />
                              <p>
                                    <label
                                          htmlFor="end-slider"
                                    >
                                          End
                                    </label>
                              </p>
                              <MockedComponent
                                    id="end-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={13}
                              />
                              <MockedComponent
                                    checked={true}
                                    label="Upper Case"
                                    labelPosition="right"
                                    onCheck={[Function]}
                                    style={
                                          Object {
                                                "marginBottom": 16,
                                              }
                                    }
                              />
                        </MockedComponent>
                  </MockedComponent>
                  <MockedComponent>
                        <RandomNumber
                              display={[Function]}
                              init={[Function]}
                              label={null}
                              style={
                                    Object {
                                          "label": Object {
                                            "color": "gray",
                                          },
                                          "value": Object {
                                            "color": "brown",
                                            "fontFamily": "monospace",
                                            "fontSize": "1.75em",
                                          },
                                        }
                              }
                        />
                  </MockedComponent>
            </MockedComponent>,
                "zDepth": 1,
              }
        }
        refs={Object {}}
        state={null}
        updater={
            Object {
                "enqueueCallback": [Function],
                "enqueueCallbackInternal": [Function],
                "enqueueElementInternal": [Function],
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
                "validateCallback": [Function],
              }
        }
    />,
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
    }
  }
  context={Object {}}
  props={
    Object {
      "children": <MockedComponent>
        <MockedComponent
            actAsExpander={true}
            showExpandableButton={true}
            subtitle="Click to expand tweak tools"
            title="Random Number"
        />
        <MockedComponent
            expandable={true}
        >
            <MockedComponent
                expandable={true}
            >
                <p>
                    <label
                        htmlFor="begin-slider"
                    >
                        Begin
                    </label>
                </p>
                <MockedComponent
                    id="begin-slider"
                    max={13}
                    min={0}
                    onChange={[Function]}
                    step={1}
                    value={0}
                />
                <p>
                    <label
                        htmlFor="end-slider"
                    >
                        End
                    </label>
                </p>
                <MockedComponent
                    id="end-slider"
                    max={13}
                    min={0}
                    onChange={[Function]}
                    step={1}
                    value={13}
                />
                <MockedComponent
                    checked={true}
                    label="Upper Case"
                    labelPosition="right"
                    onCheck={[Function]}
                    style={
                        Object {
                            "marginBottom": 16,
                          }
                    }
                />
            </MockedComponent>
        </MockedComponent>
        <MockedComponent>
            <RandomNumber
                display={[Function]}
                init={[Function]}
                label={null}
                style={
                    Object {
                        "label": Object {
                          "color": "gray",
                        },
                        "value": Object {
                          "color": "brown",
                          "fontFamily": "monospace",
                          "fontSize": "1.75em",
                        },
                      }
                }
            />
        </MockedComponent>
    </MockedComponent>,
      "zDepth": 1,
    }
  }
  refs={Object {}}
  state={null}
  updater={
    Object {
      "enqueueCallback": [Function],
      "enqueueCallbackInternal": [Function],
      "enqueueElementInternal": [Function],
      "enqueueForceUpdate": [Function],
      "enqueueReplaceState": [Function],
      "enqueueSetState": [Function],
      "isMounted": [Function],
      "validateCallback": [Function],
    }
  }
/>
`;

exports[`Snapshot: components/RandomNumberForm.jsx with specified display function 4`] = `
<mocked-component
  _reactInternalInstance={
    ReactCompositeComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <MockedComponent
        zDepth={1}
    >
        <MockedComponent>
            <MockedComponent
                actAsExpander={true}
                showExpandableButton={true}
                subtitle="Click to expand tweak tools"
                title="Random Number"
            />
            <MockedComponent
                expandable={true}
            >
                <MockedComponent
                    expandable={true}
                >
                    <p>
                        <label
                            htmlFor="begin-slider"
                        >
                            Begin
                        </label>
                    </p>
                    <MockedComponent
                        id="begin-slider"
                        max={13}
                        min={0}
                        onChange={[Function]}
                        step={1}
                        value={0}
                    />
                    <p>
                        <label
                            htmlFor="end-slider"
                        >
                            End
                        </label>
                    </p>
                    <MockedComponent
                        id="end-slider"
                        max={13}
                        min={0}
                        onChange={[Function]}
                        step={1}
                        value={13}
                    />
                    <MockedComponent
                        checked={true}
                        label="Upper Case"
                        labelPosition="right"
                        onCheck={[Function]}
                        style={
                            Object {
                                "marginBottom": 16,
                              }
                        }
                    />
                </MockedComponent>
            </MockedComponent>
            <MockedComponent>
                <RandomNumber
                    display={[Function]}
                    init={[Function]}
                    label={null}
                    style={
                        Object {
                            "label": Object {
                              "color": "gray",
                            },
                            "value": Object {
                              "color": "brown",
                              "fontFamily": "monospace",
                              "fontSize": "1.75em",
                            },
                          }
                    }
                />
            </MockedComponent>
        </MockedComponent>
    </MockedComponent>,
      "_hostContainerInfo": Object {
        "createNodeMock": [Function],
      },
      "_hostParent": null,
      "_instance": MockedComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": <MockedComponent>
            <MockedComponent
                    actAsExpander={true}
                    showExpandableButton={true}
                    subtitle="Click to expand tweak tools"
                    title="Random Number"
            />
            <MockedComponent
                    expandable={true}
            >
                    <MockedComponent
                            expandable={true}
                    >
                            <p>
                                    <label
                                            htmlFor="begin-slider"
                                    >
                                            Begin
                                    </label>
                            </p>
                            <MockedComponent
                                    id="begin-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={0}
                            />
                            <p>
                                    <label
                                            htmlFor="end-slider"
                                    >
                                            End
                                    </label>
                            </p>
                            <MockedComponent
                                    id="end-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={13}
                            />
                            <MockedComponent
                                    checked={true}
                                    label="Upper Case"
                                    labelPosition="right"
                                    onCheck={[Function]}
                                    style={
                                            Object {
                                                    "marginBottom": 16,
                                                  }
                                    }
                            />
                    </MockedComponent>
            </MockedComponent>
            <MockedComponent>
                    <RandomNumber
                            display={[Function]}
                            init={[Function]}
                            label={null}
                            style={
                                    Object {
                                            "label": Object {
                                              "color": "gray",
                                            },
                                            "value": Object {
                                              "color": "brown",
                                              "fontFamily": "monospace",
                                              "fontSize": "1.75em",
                                            },
                                          }
                            }
                    />
            </MockedComponent>
    </MockedComponent>,
          "zDepth": 1,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountImage": null,
      "_mountIndex": 0,
      "_mountOrder": 15,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": <mocked-component
        _reactInternalInstance={[Circular]}
        context={Object {}}
        props={
            Object {
                "children": <MockedComponent>
                  <MockedComponent
                        actAsExpander={true}
                        showExpandableButton={true}
                        subtitle="Click to expand tweak tools"
                        title="Random Number"
                  />
                  <MockedComponent
                        expandable={true}
                  >
                        <MockedComponent
                              expandable={true}
                        >
                              <p>
                                    <label
                                          htmlFor="begin-slider"
                                    >
                                          Begin
                                    </label>
                              </p>
                              <MockedComponent
                                    id="begin-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={0}
                              />
                              <p>
                                    <label
                                          htmlFor="end-slider"
                                    >
                                          End
                                    </label>
                              </p>
                              <MockedComponent
                                    id="end-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={13}
                              />
                              <MockedComponent
                                    checked={true}
                                    label="Upper Case"
                                    labelPosition="right"
                                    onCheck={[Function]}
                                    style={
                                          Object {
                                                "marginBottom": 16,
                                              }
                                    }
                              />
                        </MockedComponent>
                  </MockedComponent>
                  <MockedComponent>
                        <RandomNumber
                              display={[Function]}
                              init={[Function]}
                              label={null}
                              style={
                                    Object {
                                          "label": Object {
                                            "color": "gray",
                                          },
                                          "value": Object {
                                            "color": "brown",
                                            "fontFamily": "monospace",
                                            "fontSize": "1.75em",
                                          },
                                        }
                              }
                        />
                  </MockedComponent>
            </MockedComponent>,
                "zDepth": 1,
              }
        }
        refs={Object {}}
        state={null}
        updater={
            Object {
                "enqueueCallback": [Function],
                "enqueueCallbackInternal": [Function],
                "enqueueElementInternal": [Function],
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
                "validateCallback": [Function],
              }
        }
    />,
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
    }
  }
  context={Object {}}
  props={
    Object {
      "children": <MockedComponent>
        <MockedComponent
            actAsExpander={true}
            showExpandableButton={true}
            subtitle="Click to expand tweak tools"
            title="Random Number"
        />
        <MockedComponent
            expandable={true}
        >
            <MockedComponent
                expandable={true}
            >
                <p>
                    <label
                        htmlFor="begin-slider"
                    >
                        Begin
                    </label>
                </p>
                <MockedComponent
                    id="begin-slider"
                    max={13}
                    min={0}
                    onChange={[Function]}
                    step={1}
                    value={0}
                />
                <p>
                    <label
                        htmlFor="end-slider"
                    >
                        End
                    </label>
                </p>
                <MockedComponent
                    id="end-slider"
                    max={13}
                    min={0}
                    onChange={[Function]}
                    step={1}
                    value={13}
                />
                <MockedComponent
                    checked={true}
                    label="Upper Case"
                    labelPosition="right"
                    onCheck={[Function]}
                    style={
                        Object {
                            "marginBottom": 16,
                          }
                    }
                />
            </MockedComponent>
        </MockedComponent>
        <MockedComponent>
            <RandomNumber
                display={[Function]}
                init={[Function]}
                label={null}
                style={
                    Object {
                        "label": Object {
                          "color": "gray",
                        },
                        "value": Object {
                          "color": "brown",
                          "fontFamily": "monospace",
                          "fontSize": "1.75em",
                        },
                      }
                }
            />
        </MockedComponent>
    </MockedComponent>,
      "zDepth": 1,
    }
  }
  refs={Object {}}
  state={null}
  updater={
    Object {
      "enqueueCallback": [Function],
      "enqueueCallbackInternal": [Function],
      "enqueueElementInternal": [Function],
      "enqueueForceUpdate": [Function],
      "enqueueReplaceState": [Function],
      "enqueueSetState": [Function],
      "isMounted": [Function],
      "validateCallback": [Function],
    }
  }
/>
`;

exports[`Snapshot: components/RandomNumberForm.jsx with specified display function 5`] = `
<mocked-component
  _reactInternalInstance={
    ReactCompositeComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <MockedComponent
        zDepth={1}
    >
        <MockedComponent>
            <MockedComponent
                actAsExpander={true}
                showExpandableButton={true}
                subtitle="Click to expand tweak tools"
                title="Random Number"
            />
            <MockedComponent
                expandable={true}
            >
                <MockedComponent
                    expandable={true}
                >
                    <p>
                        <label
                            htmlFor="begin-slider"
                        >
                            Begin
                        </label>
                    </p>
                    <MockedComponent
                        id="begin-slider"
                        max={13}
                        min={0}
                        onChange={[Function]}
                        step={1}
                        value={0}
                    />
                    <p>
                        <label
                            htmlFor="end-slider"
                        >
                            End
                        </label>
                    </p>
                    <MockedComponent
                        id="end-slider"
                        max={13}
                        min={0}
                        onChange={[Function]}
                        step={1}
                        value={13}
                    />
                    <MockedComponent
                        checked={true}
                        label="Upper Case"
                        labelPosition="right"
                        onCheck={[Function]}
                        style={
                            Object {
                                "marginBottom": 16,
                              }
                        }
                    />
                </MockedComponent>
            </MockedComponent>
            <MockedComponent>
                <RandomNumber
                    display={[Function]}
                    init={[Function]}
                    label={null}
                    style={
                        Object {
                            "label": Object {
                              "color": "gray",
                            },
                            "value": Object {
                              "color": "brown",
                              "fontFamily": "monospace",
                              "fontSize": "1.75em",
                            },
                          }
                    }
                />
            </MockedComponent>
        </MockedComponent>
    </MockedComponent>,
      "_hostContainerInfo": Object {
        "createNodeMock": [Function],
      },
      "_hostParent": null,
      "_instance": MockedComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": <MockedComponent>
            <MockedComponent
                    actAsExpander={true}
                    showExpandableButton={true}
                    subtitle="Click to expand tweak tools"
                    title="Random Number"
            />
            <MockedComponent
                    expandable={true}
            >
                    <MockedComponent
                            expandable={true}
                    >
                            <p>
                                    <label
                                            htmlFor="begin-slider"
                                    >
                                            Begin
                                    </label>
                            </p>
                            <MockedComponent
                                    id="begin-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={0}
                            />
                            <p>
                                    <label
                                            htmlFor="end-slider"
                                    >
                                            End
                                    </label>
                            </p>
                            <MockedComponent
                                    id="end-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={13}
                            />
                            <MockedComponent
                                    checked={true}
                                    label="Upper Case"
                                    labelPosition="right"
                                    onCheck={[Function]}
                                    style={
                                            Object {
                                                    "marginBottom": 16,
                                                  }
                                    }
                            />
                    </MockedComponent>
            </MockedComponent>
            <MockedComponent>
                    <RandomNumber
                            display={[Function]}
                            init={[Function]}
                            label={null}
                            style={
                                    Object {
                                            "label": Object {
                                              "color": "gray",
                                            },
                                            "value": Object {
                                              "color": "brown",
                                              "fontFamily": "monospace",
                                              "fontSize": "1.75em",
                                            },
                                          }
                            }
                    />
            </MockedComponent>
    </MockedComponent>,
          "zDepth": 1,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountImage": null,
      "_mountIndex": 0,
      "_mountOrder": 18,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": <mocked-component
        _reactInternalInstance={[Circular]}
        context={Object {}}
        props={
            Object {
                "children": <MockedComponent>
                  <MockedComponent
                        actAsExpander={true}
                        showExpandableButton={true}
                        subtitle="Click to expand tweak tools"
                        title="Random Number"
                  />
                  <MockedComponent
                        expandable={true}
                  >
                        <MockedComponent
                              expandable={true}
                        >
                              <p>
                                    <label
                                          htmlFor="begin-slider"
                                    >
                                          Begin
                                    </label>
                              </p>
                              <MockedComponent
                                    id="begin-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={0}
                              />
                              <p>
                                    <label
                                          htmlFor="end-slider"
                                    >
                                          End
                                    </label>
                              </p>
                              <MockedComponent
                                    id="end-slider"
                                    max={13}
                                    min={0}
                                    onChange={[Function]}
                                    step={1}
                                    value={13}
                              />
                              <MockedComponent
                                    checked={true}
                                    label="Upper Case"
                                    labelPosition="right"
                                    onCheck={[Function]}
                                    style={
                                          Object {
                                                "marginBottom": 16,
                                              }
                                    }
                              />
                        </MockedComponent>
                  </MockedComponent>
                  <MockedComponent>
                        <RandomNumber
                              display={[Function]}
                              init={[Function]}
                              label={null}
                              style={
                                    Object {
                                          "label": Object {
                                            "color": "gray",
                                          },
                                          "value": Object {
                                            "color": "brown",
                                            "fontFamily": "monospace",
                                            "fontSize": "1.75em",
                                          },
                                        }
                              }
                        />
                  </MockedComponent>
            </MockedComponent>,
                "zDepth": 1,
              }
        }
        refs={Object {}}
        state={null}
        updater={
            Object {
                "enqueueCallback": [Function],
                "enqueueCallbackInternal": [Function],
                "enqueueElementInternal": [Function],
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
                "validateCallback": [Function],
              }
        }
    />,
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
    }
  }
  context={Object {}}
  props={
    Object {
      "children": <MockedComponent>
        <MockedComponent
            actAsExpander={true}
            showExpandableButton={true}
            subtitle="Click to expand tweak tools"
            title="Random Number"
        />
        <MockedComponent
            expandable={true}
        >
            <MockedComponent
                expandable={true}
            >
                <p>
                    <label
                        htmlFor="begin-slider"
                    >
                        Begin
                    </label>
                </p>
                <MockedComponent
                    id="begin-slider"
                    max={13}
                    min={0}
                    onChange={[Function]}
                    step={1}
                    value={0}
                />
                <p>
                    <label
                        htmlFor="end-slider"
                    >
                        End
                    </label>
                </p>
                <MockedComponent
                    id="end-slider"
                    max={13}
                    min={0}
                    onChange={[Function]}
                    step={1}
                    value={13}
                />
                <MockedComponent
                    checked={true}
                    label="Upper Case"
                    labelPosition="right"
                    onCheck={[Function]}
                    style={
                        Object {
                            "marginBottom": 16,
                          }
                    }
                />
            </MockedComponent>
        </MockedComponent>
        <MockedComponent>
            <RandomNumber
                display={[Function]}
                init={[Function]}
                label={null}
                style={
                    Object {
                        "label": Object {
                          "color": "gray",
                        },
                        "value": Object {
                          "color": "brown",
                          "fontFamily": "monospace",
                          "fontSize": "1.75em",
                        },
                      }
                }
            />
        </MockedComponent>
    </MockedComponent>,
      "zDepth": 1,
    }
  }
  refs={Object {}}
  state={null}
  updater={
    Object {
      "enqueueCallback": [Function],
      "enqueueCallbackInternal": [Function],
      "enqueueElementInternal": [Function],
      "enqueueForceUpdate": [Function],
      "enqueueReplaceState": [Function],
      "enqueueSetState": [Function],
      "isMounted": [Function],
      "validateCallback": [Function],
    }
  }
/>
`;
